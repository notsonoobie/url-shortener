{"version":3,"sources":["components/logo.svg","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","done","setDone","show","setShow","sts","text","msg","errMsg","setErrMsg","url","setUrl","JSON","parse","window","localStorage","getItem","data","setData","handleSubmit","e","a","undefined","preventDefault","fetch","method","headers","body","stringify","response","status","json","result","arr","push","setItem","err","statusText","message","Container","style","minHeight","display","alignItems","justifyContent","Row","className","Col","xs","Alert","variant","onClose","dismissible","Heading","Card","Img","width","margin","src","Logo","Body","Form","onSubmit","InputGroup","Prepend","Text","id","Control","aria-label","aria-describedby","type","value","onChange","target","Button","padding","Spinner","animation","length","maxHeight","overflowY","Table","striped","bordered","hover","map","elm","i","key","href","fullUrl","rel","Date","createdAt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ddb18864.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.980adbf0.svg\";","import React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Table from 'react-bootstrap/Table'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Alert from 'react-bootstrap/Alert'\nimport Logo from './logo.svg'\n\nfunction App() {\n  const [done, setDone] = useState(true)\n  const [show, setShow] = useState(false)\n  const [errMsg, setErrMsg] = useState({sts:'',text:'',msg:''})\n  const [url,setUrl] = useState('')\n  const [data, setData] = useState(JSON.parse(window.localStorage.getItem('url-data')) || [])\n  const handleChange = (e) => {\n    setUrl(e.target.value)\n  }\n  const handleSubmit = async (e) => {\n    setShow(false)\n    setErrMsg(undefined)\n    setDone(false)\n    e.preventDefault()\n    let response = await fetch('/url', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\"url\": url})\n    });\n    if(response.status === 302 || response.status === 201){\n\n      let result = await response.json()\n      if(window.localStorage.getItem('url-data')){\n        let arr = JSON.parse(window.localStorage.getItem('url-data'))\n        arr.push(result)\n        window.localStorage.setItem('url-data',JSON.stringify(arr))\n        setData(JSON.parse(window.localStorage.getItem('url-data')))\n      }else{\n        let arr = []\n        arr.push(result)\n        window.localStorage.setItem('url-data',JSON.stringify(arr))\n        setData(JSON.parse(window.localStorage.getItem('url-data')))\n      }\n\n    }else{\n      // ERROR HANDELING\n      let err = await response.json()\n      setErrMsg({\n        sts: response.status,\n        text: response.statusText,\n        msg: err.message\n      })\n      setShow(true)\n    }\n    setDone(true)\n    setUrl('')\n  }\n  return (\n    <Container style={{minHeight: '100vh',display:'flex', alignItems: 'center', justifyContent: 'center'}}>\n      <Row className=\"justify-content-center\">\n        {\n          show && (\n            <Col xs={10}>\n              <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\n                <Alert.Heading>{`${errMsg.sts}! - ${errMsg.text}`}</Alert.Heading>\n                <p>\n                  {errMsg.msg}\n                </p>\n              </Alert>\n            </Col>\n          )\n        }\n        <Card>\n          <Card.Img style={{width: '10rem', margin: '0 auto'}} variant=\"top\" src={Logo} />\n          <Card.Body>\n            <Col>\n              <Form onSubmit={handleSubmit}>\n                <Row>\n                  <InputGroup className=\"mb-3\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"url\">URL</InputGroup.Text>\n                    </InputGroup.Prepend>\n                      <Form.Control\n                        aria-label=\"Url\"\n                        aria-describedby=\"url\"\n                        type='text'\n                        value={url}\n                        onChange={handleChange}\n                      />\n                  </InputGroup>\n                </Row>\n                <Row xs={12} className='mb-5'>\n                  <Button style={{width: '100%', padding: '1rem'}} variant=\"dark\" type='submit'> {done ? 'Shortify' : <Spinner animation=\"border\" variant=\"light\" />}</Button>\n                </Row>\n              </Form>\n            </Col>\n            {\n              data.length>0 && (\n                <Row style={{maxHeight: '40vh', overflowY: 'auto'}}>\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>#</th>\n                          <th>Url</th>\n                          <th>Shortened</th>\n                          <th>Timestamp</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {\n                          data.map((elm,i) => (\n                            <tr key={i}>\n                              <td>{i}</td>\n                              <td>{elm.url}</td>\n                              <td><a className='text-success' href={elm.fullUrl} target='_blank' rel=\"noopener noreferrer\">{elm.fullUrl}</a></td>\n                              <td>{Date(elm.createdAt)}</td>\n                            </tr>\n                          ))\n                        }\n                      </tbody>\n                    </Table>  \n                </Row>                                                \n              )\n            }\n          </Card.Body>\n        </Card>\n      </Row>\n  </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}